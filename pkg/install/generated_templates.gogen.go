// Code generated by vfsgen; DO NOT EDIT.

package install

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	pathpkg "path"
	"time"
)

// templates statically implements the virtual filesystem provided to vfsgen.
var templates = func() http.FileSystem {
	fs := vfsgen۰FS{
		"/": &vfsgen۰DirInfo{
			name:    "/",
			modTime: time.Date(2019, 8, 8, 17, 13, 2, 915128204, time.UTC),
		},
		"/flux-helm-operator-account.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-operator-account.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 17, 7, 41, 155953011, time.UTC),
			uncompressedSize: 948,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x92\x39\x6f\xdc\x30\x10\x85\x7b\xfe\x8a\x01\x5c\x38\x09\x2c\x05\xee\x02\x75\xb6\x8b\x14\x09\x52\x28\x47\x13\xa4\x18\x92\x4f\x59\xc6\x5c\x8e\x30\x24\x37\x87\xb0\xff\x3d\x90\xb4\x06\xbc\x8e\xed\x34\xdb\x8d\xe6\xd2\x9b\xc7\xaf\x69\x1a\x73\x46\x9f\x36\xa0\x0c\xdd\x05\x07\x62\xe7\xa4\xa6\x72\x41\x2e\xd6\x5c\xa0\xa4\x12\x91\x2f\x88\x93\x3f\x4a\x91\x0d\xc9\x87\xf4\x9d\x58\x61\xce\x48\x52\xfc\x4d\x09\xf0\xf0\x34\x88\xd2\xbb\x6a\xa1\x09\x05\x99\x7e\x86\xb2\x59\x46\x1a\xcb\x19\x7e\xfe\x03\x72\x26\x27\xa9\xa8\x44\x7a\xd1\x5f\x5f\xdd\xbc\x6c\x0d\x8f\xe1\x0b\x34\x07\x49\x1d\xed\x2e\xcd\x6d\x48\xbe\xa3\x8f\xab\xaa\xab\x55\x94\xd9\xa2\xb0\xe7\xc2\x9d\x21\x8a\x6c\x11\xf3\x1c\x11\x25\xde\xa2\xa3\x21\xd6\x5f\xcd\x06\x71\xdb\xc8\x08\xe5\x22\x6a\x9e\x2e\x4d\x13\x85\x81\xda\x0f\xbc\x45\x1e\xd9\x81\xf6\xfb\x43\xf7\xf2\xd9\xd1\x34\x1d\x57\xa7\x89\x90\xfc\x7e\x6f\x66\xcf\xee\x8b\x55\xcb\xae\xe5\x5a\x36\xa2\xe1\x0f\x97\x20\xa9\xbd\x7d\x93\xdb\x20\xaf\x77\x97\x16\x85\xef\x6e\xb9\x59\xdd\xeb\x25\xe2\x94\x87\x18\xad\x11\xcb\x78\x43\x3c\x86\xb7\x2a\x75\xcc\x1d\x7d\x3d\x7f\x75\xfe\x6d\xd9\xa9\xc8\x52\xd5\xe1\x28\xb9\x83\xda\x7b\x89\x86\x92\xa4\xfe\xd0\xf8\xb9\x7f\xff\x74\xef\x09\xae\xbf\x5e\xc9\x39\xad\x09\x12\xd1\x63\x98\x17\xdc\x99\xf0\x8c\x36\x43\xf4\xef\x9b\x3c\xb3\x3d\x57\xfb\x03\xae\x1c\x5c\x7e\x14\xcd\xff\x08\x7f\x88\xd6\x43\xf6\x1e\xa3\x2d\xe6\x39\xf2\x18\xb8\xc6\xb2\xe2\x37\x53\xfa\x37\x00\x00\xff\xff\xad\xec\xff\x2b\xb4\x03\x00\x00"),
		},
		"/flux-helm-release-crd.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "flux-helm-release-crd.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 17, 7, 41, 156199030, time.UTC),
			uncompressedSize: 4007,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xdf\x6f\xfb\x34\x10\x7f\xcf\x5f\x61\x0d\xa4\x02\x5a\x0a\x13\x08\x41\x5e\xd0\xc4\x34\x0d\x0d\xd8\xb4\x6a\x7b\x99\x86\x74\x4d\xae\xa9\xa9\x63\x9b\xf3\x25\x5b\x41\xfc\xef\xc8\x49\xd3\x2d\x59\x7e\x74\xed\x26\x5e\xbe\x7e\x6a\x7d\xbe\x8f\xef\x3e\xf7\xc3\x97\x30\x0c\x03\xb0\xf2\x0e\xc9\x49\xa3\x23\x01\x56\xe2\x13\xa3\xf6\xff\xdc\x74\xf5\x83\x9b\x4a\xf3\x75\x71\x32\x47\x86\x93\x60\x25\x75\x12\x89\x9f\x73\xc7\x26\xbb\x41\x67\x72\x8a\xf1\x0c\x17\x52\x4b\x96\x46\x07\x19\x32\x24\xc0\x10\x05\x42\x68\xc8\x30\x12\x4b\x54\x19\xa1\x42\x70\xe8\xa6\x0b\x95\x3f\x4d\x1f\x11\x0a\x9c\x3e\x1a\x5a\xb9\xc0\x59\x8c\xfd\xd9\x94\x4c\x6e\x23\xf1\x4a\x5e\xa1\x38\x7f\x44\x88\xea\xee\x0b\x54\xd9\x4d\x05\x58\xee\x2a\xe9\xf8\xb2\x2d\xf9\x55\x3a\x2e\xa5\x56\xe5\x04\xaa\x69\x46\x29\x70\x4b\x43\xfc\xfb\x33\x78\x28\x96\x14\x08\xe1\x62\x63\x31\x12\xa5\xc0\x42\x8c\x89\xdf\xcb\xe7\xb4\x71\x75\x73\xd8\x31\x70\xee\x22\xf1\xcf\xbf\x81\x10\x45\x4d\x5c\xcd\xd1\x76\x6b\x0b\x5d\x51\xf1\x2c\x2f\x31\x90\x0a\x4c\x22\xc1\x94\x63\xbd\xc5\x86\x20\xc5\xed\x5e\x01\x4a\x26\xe0\x89\xad\x80\x8c\x45\x7d\x7a\xfd\xcb\xdd\xb7\xb3\x78\x89\x19\x44\x1b\x35\x4b\xc6\x22\xb1\xac\xad\x2b\xa1\x36\xc4\xd6\x8b\xf0\xaf\x5c\x92\xbf\xef\x7e\x12\x2f\x81\x78\xf2\xf0\x42\xda\x85\x50\x69\x95\x8c\x79\x36\x9a\x02\x21\x78\xed\x79\x72\x4c\x52\xa7\x2d\x91\x05\x66\x24\x1d\x89\xa3\x3f\xee\x21\xfc\xfb\x9b\xf0\xc7\x87\x2f\xee\xc3\xcd\xaf\xaf\xea\xad\x2f\x7f\xfa\xfc\xa8\xa1\xc8\x32\x43\x93\x73\xf7\x45\x52\x33\xa6\x48\x2d\xd9\xc2\x50\x06\x5c\x4a\xbf\xff\xae\x65\xb9\x43\xbe\x03\x95\xb7\x5d\xaa\x01\xe7\xc6\x28\x04\x1d\xb4\xe0\x62\xbc\xb5\x29\x41\xd2\xe3\x6f\x97\x16\x19\xa5\xe6\x10\xaf\xba\x35\xcc\xfc\x4f\x8c\xb9\xcd\x50\x0f\xdf\x7e\xa1\x86\xb9\x7a\x75\xfd\xb0\x09\x5b\xe3\xdf\xae\x46\x18\x13\x02\xef\xa1\x99\x48\xe7\x2d\xbd\x30\x66\xd5\xe1\xc6\x98\x76\x4f\xb4\xc5\x48\xc4\xc5\x60\xd4\xfd\x7a\x04\x39\x80\xda\x65\x4e\xe1\xd3\xe4\x5c\x2a\x9c\x79\x2e\xb8\x27\x61\x80\x08\xd6\x2d\x89\x64\xcc\x3a\x7c\x1f\x88\x7c\xb3\x12\x7d\x5f\x68\x14\x62\xb5\x86\xd2\x63\xd3\x57\x3b\xf6\x07\x6a\xb2\xf4\xd0\x9d\x93\xc9\x3e\xd6\xb7\x61\xc3\x63\xa3\x17\x32\xfd\x0d\xec\x25\xae\x6f\x70\x31\xe4\x43\x0f\xbe\xd8\x8d\xbf\x71\x53\xc4\x20\x8f\x62\xb8\xbf\xd5\x6b\x85\xeb\x83\xf4\x8d\xf5\xad\x1d\xd4\x18\x48\x5f\x09\xf9\x37\xc4\x27\xec\x27\x3a\xcb\x75\x38\x9d\x7e\xec\x21\x0d\x6a\x56\xbe\xf5\xef\xc3\x69\x4e\x6a\x6f\x4a\x73\x1a\x75\xe6\x83\x19\x29\x47\x05\xdf\x1a\xdf\x87\x0c\x0b\xbc\xdc\x9b\x0d\xaf\xfc\xbf\xd2\x61\x34\x5e\x75\xb0\x10\x36\x87\xab\x66\x93\xeb\xf0\xb6\x79\xfe\x65\x09\x8f\x1e\x7e\x95\xa0\xa3\x1a\x2f\x03\xd8\x3a\x5c\x0c\x4c\x47\x1d\xf1\x2c\x91\xda\xa7\x3b\x29\x69\x5a\x90\x4a\x9e\x1c\x8b\xbe\xd0\x0f\x87\x3d\xed\x7e\xca\x77\x88\x76\x3d\x23\xa4\x92\xc5\x67\x42\x1b\x16\x89\xff\x4a\xc1\x44\xcc\xd7\xe2\xea\x74\xd6\xa1\xd4\x9f\x5f\x23\xb7\xd1\x70\x6d\xf4\xea\xb9\x95\xb4\x67\x68\x6f\x6d\xd2\x33\x7f\x0d\x27\x64\x93\x66\x42\x6b\x9c\x64\x43\x6b\xcf\x76\xd9\xc9\x8f\xc5\x64\xf3\x21\xf2\x66\xe2\x9f\xd1\x0e\xe4\x3f\x27\xb5\x2b\xff\x7b\xcc\x35\xd5\xaa\x3f\xc0\x0e\xb3\xd4\x61\x56\x20\xed\x6a\x6c\x59\x0d\xd7\xb9\x52\xd5\xcc\xd8\x7d\xf7\xbb\x3e\x9a\xff\x05\x00\x00\xff\xff\x50\xad\xd4\x1b\xa7\x0f\x00\x00"),
		},
		"/helm-operator-deployment.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "helm-operator-deployment.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 17, 8, 15, 681493154, time.UTC),
			uncompressedSize: 5671,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x58\xcd\x8e\xdb\xc8\x11\xbe\xcf\x53\x14\x66\x0e\xbe\x8c\x48\x19\xeb\xec\x81\x86\x0f\xc9\x6e\x76\x6d\xc0\x76\x06\x19\x23\x40\x4e\xbb\xa5\x66\x49\xec\xa8\xd9\xcd\x74\x17\xa5\x10\xc2\xe4\xd9\x83\x6a\x52\x14\x29\x8a\x9a\x19\x67\x75\xf1\x98\xac\xff\xfa\xea\x8f\x8b\xc5\xe2\x06\x2b\xfd\x0f\xf2\x41\x3b\x9b\x01\x56\x55\x48\x77\x6f\x6f\xb6\xda\xe6\x19\xfc\x4c\x95\x71\x4d\x49\x96\x6f\x4a\x62\xcc\x91\x31\xbb\x01\xb0\x58\x52\x06\x6b\x53\xff\x67\x51\x90\x29\x17\xae\x22\x8f\xec\xfc\xe1\x00\x7a\x0d\xc9\x57\x2c\x29\x54\xa8\x08\x9e\x9e\x3a\xea\xf8\xdf\x0c\x0e\x87\xf1\xdb\xc3\x01\xc8\xe6\x42\x16\x2a\x52\x22\xda\x53\x65\xb4\xc2\x90\xc1\xdb\x1b\x80\x40\x86\x14\x3b\x2f\x6f\x00\x4a\x64\x55\x7c\xc6\x15\x99\xd0\x3e\x98\xb7\x44\x78\xd9\x23\xd3\xa6\x69\x49\xb9\xa9\x28\x83\xbf\x93\xf2\x84\x4c\x37\x00\x4c\x65\x65\x90\xa9\x13\x3d\xf0\x4e\x7e\x66\xa4\xe5\xaa\x1e\xf9\xa1\xb5\x8e\x91\xb5\xb3\x03\x9e\xca\xbb\x92\xb8\xa0\x3a\x24\xda\xa5\x41\x79\x14\x13\x6e\xd9\xd7\x74\x1b\x89\x8e\x3e\xc7\xbf\xc9\xef\xb4\xa2\x3f\x2b\xe5\x6a\xcb\x5f\xaf\xab\xdb\x39\x53\x97\x14\xb2\x2e\xde\x7f\xb5\xb8\x32\xf4\x4d\x1b\x43\xfe\xdb\xe7\xc7\x36\xea\xed\x6f\xd1\x59\x1e\xa5\xb0\x09\x0b\x85\xfd\x3b\x00\xe5\xec\x5a\x6f\xbe\x60\x95\x0d\x1e\x4e\x9d\x6d\xf9\x16\x2d\xf5\x88\x32\xa7\x35\xd6\x86\xbf\xb8\x9c\x32\x58\xfe\xb8\x5c\x5e\x51\x4c\x9e\xc3\x80\x39\x48\x2a\x78\xac\xb8\x7d\xd6\x3a\xdf\xf9\xd6\x7b\xf5\x13\x79\x7e\xec\xdf\xc3\xd3\xd3\xdc\xab\x03\x90\x09\x42\x70\xe6\x00\x79\x3e\xc1\x6d\xde\x89\x77\xcb\xe5\xa1\x17\xd1\xd1\xdd\x1d\xff\x85\x7f\xba\x1a\xf6\xda\x18\xb0\x44\x39\x70\x41\x81\x80\xf7\xee\x98\x11\x31\xb9\x11\x12\xb4\x0c\xec\x80\x02\xe3\xca\xe8\x50\xc0\x0e\x8d\xce\x91\x29\x87\x6f\x9f\x1f\x7b\x71\xca\x59\x4b\x2a\xe2\x06\x70\x83\xda\x06\x86\xd6\xad\x89\xe6\xf9\x4c\xde\x5d\xca\xe4\xdd\x8b\x33\x79\x77\x35\x93\x77\xd0\x46\x36\x16\x10\x6c\xeb\x15\x79\x4b\x4c\x11\xd2\x6c\xc2\xc4\xbc\x69\xd0\x07\x6a\xc6\x39\xbf\xfb\x03\x73\xfe\x8a\xa4\x5f\xf2\xf7\xdd\xc9\xdf\xc3\x81\x6c\x3e\x20\xfe\x56\x10\xac\x9d\x31\x6e\xaf\xed\xa6\xcb\x33\xe8\x00\x6b\xe7\xa1\x0e\xf2\x0c\x41\xd5\x81\x5d\xa9\x03\xe5\xb0\xb5\x6e\x6f\x7f\x2b\x5c\xe0\x00\x6b\x6d\xe8\xbe\x17\xb4\x2f\xb4\x2a\x5a\x74\x9c\x00\xe4\x20\x77\x47\xd0\x08\x93\xfc\xe1\xc1\xed\x2d\x6c\x34\x4b\x33\x74\xe0\x91\x8b\x13\x1e\x80\x0b\xb4\x9d\xe2\x8d\xe6\xa2\x5e\x81\xf3\x02\x44\x30\x7a\x4b\x89\x00\xf4\x8d\x31\x80\x26\xb8\x5e\x45\x29\x2d\x05\xf4\x29\x13\xda\xb2\x8b\x3c\xca\x59\x46\x6d\xc9\xdf\xc3\x8a\x8c\xdb\x27\x17\x01\x5f\x62\xd3\x0a\xdc\x0b\x92\xd9\x49\x67\xdb\xe9\x9c\x00\x2d\x84\x50\xfc\xd6\xc2\xe9\xcc\x5d\x19\x1a\xda\x59\xb1\xb3\x74\x9e\x5a\xbb\x9d\x25\xf8\xfd\x53\x2e\xaf\xb8\xf9\x45\x1b\xfa\xfd\x7d\x0c\xa4\x00\x1f\xad\xa2\xfb\x2e\x16\x6f\x3c\xf5\x82\x5a\x5f\xc7\x32\x7e\xd5\xfc\xb1\x5e\xc5\xf8\x24\xf0\xf5\x2f\xd1\x17\xb2\xec\x1b\xd8\x52\x03\xa1\x70\xb5\xc9\x61\x75\x92\x71\xdb\x9a\x78\xdb\x05\xb3\x15\x74\x7b\xb2\xfd\x56\xf4\xc6\x30\x51\x0e\xda\xc2\x7f\xd3\x24\x84\x22\x9d\x86\xe3\x08\xf3\x10\x8a\x5c\xfb\x57\x15\x60\x08\xc5\xf3\x85\xd7\x76\x1f\x29\x82\xc7\xc7\x8f\x23\xe8\xdf\x9c\x0a\xf2\xf1\x63\x74\x93\x1d\xa0\x52\x14\x42\x74\xff\xd7\x0e\x2f\x41\xb3\xf3\xcd\xa4\x0f\x6f\x34\x2f\xb6\xd4\xbc\xae\x01\x4f\x8d\x18\x12\x4f\x2c\x8f\x20\x27\xdb\x07\xd2\x13\xe6\x0b\x67\x4d\x73\x0f\x7b\x82\xbd\xb3\x6f\x18\x56\x04\x32\xac\xc4\x78\x55\x94\x2e\xbf\x79\x45\xb3\xd5\xa1\xaf\xbf\x23\x4a\xfa\x12\xec\xcb\x85\x0b\x3c\x01\x5d\x18\x83\xc0\xf4\x18\x33\x01\x5b\x1b\xb4\xf7\x40\xc9\x26\xb9\x07\x3c\x82\x29\x8f\xbb\x8e\x50\x25\xf0\x69\xdd\x8b\x18\xe9\xf9\x57\x1d\x38\x02\x30\xd4\xaa\x88\xfa\xee\x63\xf0\xbb\x50\x0c\xaa\xa1\xe7\x47\x23\x61\x68\xa0\x72\xda\x72\x00\x64\x48\x89\x55\x2a\x90\xc8\x53\x01\x99\xee\xca\x01\x30\x00\x1e\xd5\x8b\xda\x53\xe7\xe8\xa6\x49\x1d\xe8\xac\x0e\xb6\xd4\xdc\x47\x0b\x07\x0d\xe5\x58\x9c\xc7\x4e\xd2\x8b\x19\x94\x2a\xae\xdc\x8e\xee\x61\xaf\xb9\x90\xe8\x8c\x4b\xb2\xab\xa4\xb8\x6d\x89\xd3\x84\xaa\xe8\x85\x48\x10\xb5\x8d\x4e\xb7\x60\x39\x16\x3a\xe5\x50\x90\xa7\xf9\x92\x19\x23\xf0\x25\xe3\x20\x96\x8d\xb0\xb5\xa9\xb9\x5e\x36\xdf\x05\xbe\xf9\x9e\x7f\x36\xd7\xd1\x53\xc4\x4e\x94\xde\x22\xae\x2f\x36\x4d\x21\x69\xb0\x34\x67\x0d\x10\x6d\xde\xe5\xa2\x1b\x12\xa8\x04\x29\xda\xc7\x8d\xb6\x49\xe2\x64\x31\xc8\x4c\x5e\xe6\x89\xa4\x8f\xa4\x69\x29\xac\xc3\xa9\x73\xf5\x0a\x39\xce\x21\x5f\x92\x6f\x6b\xa2\xc4\x2d\xb5\x3d\x5c\xe4\xa6\x27\xc1\x27\xcf\xe7\x73\x31\xb4\x7d\x21\xb6\xbf\x36\x2b\x71\xc2\x0e\xa5\x5c\x57\x11\x6d\x1c\x48\xa4\xb2\xe2\xe6\x67\xed\x33\x38\xf4\x8d\xad\x9f\x45\xfd\x0a\x3d\xdd\x29\xce\xf6\xe0\x2e\x57\x9e\x62\x7e\xac\x83\xdb\x4c\x56\xfa\xc0\xb7\xa0\x4b\xdc\x50\x3b\xa5\x47\x9c\x09\xfc\xa2\x6d\xdc\xdc\xa0\x94\x79\xeb\x49\xc9\x75\x73\x92\xe7\xc9\x10\x06\x92\xa9\x1a\x65\xc0\xae\x3d\x8d\xa4\x72\x0b\xe6\x2a\x64\x69\x5a\xd4\xab\x24\x77\x6a\x4b\x3e\x51\xae\x4c\x7d\xba\x27\xdc\xd1\xde\xf9\x6d\x48\x47\xda\x52\xc6\x4d\x18\x08\x17\x4c\xc8\x85\x23\xd7\x8f\x98\xc0\xb8\x19\x55\x0d\xb4\x3a\x33\xe8\xa4\x6b\x17\x1b\x85\xca\xc7\x62\xb3\x65\xf2\x76\x99\xbc\x1d\x33\x3d\xd4\xc6\x3c\x38\xa3\x55\x93\xc1\xa7\xf5\x57\xc7\x0f\x9e\xc2\xd0\xb7\xca\x79\x1e\x9c\x27\xfd\x42\xc9\x5c\x8d\x6f\x82\x36\x0d\x0f\xce\x73\x06\x3f\x2c\x7f\x38\x2d\xf5\x9e\x82\xab\xbd\xa2\x30\x9c\x1a\x9e\xfe\x5d\x53\xe0\x30\x9e\x24\xaa\xaa\x33\xf8\xd3\xb2\x1c\x3d\x2c\xa9\x74\xbe\xc9\xe0\xc7\x77\x5f\x74\xff\xa2\x2d\xb1\x2f\x82\xf3\x81\x8c\x3b\xf8\x64\x95\xa9\x73\x6a\xfb\x7e\xb7\x22\x8d\x37\x9a\xd9\xc5\xcb\xf9\x69\x27\x16\x91\x52\xa0\xef\x8f\xfd\x72\xb0\x22\x15\x74\x1c\x2c\x39\x29\x83\x9e\xf2\xb6\x43\x26\x03\xde\x8b\x93\xbf\x45\x73\xb4\xe6\x01\xb9\xc8\x20\xf5\xce\x71\x5c\x1e\x46\x14\x52\x92\x7f\xb3\xa6\xc9\x40\xae\xbf\x67\x26\x3c\x5c\x1d\xdb\x63\x75\xa3\x51\x32\x9d\xa5\xf3\xfd\x77\x6a\xf9\x48\xd4\xf4\x52\x7a\xbe\x79\x4c\x45\xee\xd0\x77\x22\x05\xbe\xe9\x85\xf5\xe4\x05\xfd\xe2\x15\x62\xd3\xc8\x37\x7f\x15\x5f\x08\xf0\xec\x7d\x3a\x17\x1c\x61\x18\x91\x8d\x73\x7b\x55\x05\xbe\x50\xfe\x39\xe5\x99\x8a\xab\x69\x9e\x71\x68\x3e\xdb\x23\x87\xa6\x60\xbd\xaa\x02\x5f\x28\xff\x9c\x72\x52\x0f\x67\x60\x43\xbf\x19\xf5\x82\x8f\x6e\x2f\x65\xbf\x96\xd6\x3d\xba\x8f\x25\xca\x8b\x05\xc7\x47\x8b\xfe\x43\xd3\x87\xd1\x21\x39\xfc\xe0\x74\xfe\xe8\x14\x4a\x39\x6d\x17\xa1\x09\x4c\x65\x6f\xcf\xf3\xdf\x57\xee\xe4\x9c\xef\x96\xff\xda\xc7\x2f\x40\x97\x2c\x3b\xde\xdd\xe4\x79\x51\x21\x17\x1f\xa6\xf1\x49\x15\x26\xca\xf3\x1c\x37\x45\x1b\x3e\x8c\x32\x72\x46\xb2\xa5\xe6\xa2\x70\xb9\xd3\x93\x61\xe5\x9f\x1b\x36\x67\x55\x64\xbc\x62\xd3\x8e\xbc\x5e\x37\x57\x6d\x7a\x99\xd3\x17\x01\xfd\x93\x2b\x65\xb5\x04\x57\xc7\xe5\x77\xfe\x6b\xca\xf3\x5f\x51\x5a\xf0\xfe\x3f\xd9\x98\xf0\x5f\xca\xc7\x84\xe8\xc5\x19\x99\x9a\xf7\xe2\x9c\x4c\x58\x2f\x65\xe5\x3b\xdd\x3f\x15\xe6\xff\x02\x00\x00\xff\xff\x2e\x92\x75\x6a\x27\x16\x00\x00"),
		},
		"/tiller-ca-cert-configmap.yaml.tmpl": &vfsgen۰CompressedFileInfo{
			name:             "tiller-ca-cert-configmap.yaml.tmpl",
			modTime:          time.Date(2019, 8, 8, 17, 13, 2, 907216598, time.UTC),
			uncompressedSize: 235,

			compressedContent: []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\x8e\xc1\x4a\x07\x21\x10\x87\xef\x3e\xc5\xef\x05\x5c\x08\xa2\x83\xb7\x92\xff\xad\xba\xb4\x74\x9f\x74\xb6\x24\x1d\x17\xb5\x08\xcc\x77\x8f\x95\x2d\xe8\x38\xcc\x37\xdf\x37\xbd\x23\x6c\x58\x2e\x42\x2f\x91\xd7\x10\x23\x97\xf5\xfe\x09\x63\xd0\x1e\x9e\xb9\xd4\x90\xc5\xe0\xf3\x4a\xbd\x07\xf1\x06\x36\xcb\x16\x5e\x1f\x68\x57\x89\x1b\x79\x6a\x64\x14\x20\x94\xd8\x60\x8b\x1f\x5f\xfa\x8d\x63\xd2\x2d\x56\xed\x48\xbb\x09\x2b\xe0\x6c\x3c\x52\xe2\xba\x93\x63\x8c\x71\x5e\xcd\xd1\x1c\xc0\xbf\x6d\xef\x60\xf1\x07\xf6\x9b\x70\xb4\xb8\xd2\x0c\xbe\x15\x30\x85\x77\x54\xf9\xe6\xfa\x22\x2e\x7b\xc6\xf2\xf7\xb8\xbd\xb5\x5c\x9a\xcd\xd2\x58\xda\x21\xe8\x5d\x4f\x97\x1e\xe3\x27\x00\x00\xff\xff\xc5\x26\x85\x7a\xeb\x00\x00\x00"),
		},
	}
	fs["/"].(*vfsgen۰DirInfo).entries = []os.FileInfo{
		fs["/flux-helm-operator-account.yaml.tmpl"].(os.FileInfo),
		fs["/flux-helm-release-crd.yaml.tmpl"].(os.FileInfo),
		fs["/helm-operator-deployment.yaml.tmpl"].(os.FileInfo),
		fs["/tiller-ca-cert-configmap.yaml.tmpl"].(os.FileInfo),
	}

	return fs
}()

type vfsgen۰FS map[string]interface{}

func (fs vfsgen۰FS) Open(path string) (http.File, error) {
	path = pathpkg.Clean("/" + path)
	f, ok := fs[path]
	if !ok {
		return nil, &os.PathError{Op: "open", Path: path, Err: os.ErrNotExist}
	}

	switch f := f.(type) {
	case *vfsgen۰CompressedFileInfo:
		gr, err := gzip.NewReader(bytes.NewReader(f.compressedContent))
		if err != nil {
			// This should never happen because we generate the gzip bytes such that they are always valid.
			panic("unexpected error reading own gzip compressed bytes: " + err.Error())
		}
		return &vfsgen۰CompressedFile{
			vfsgen۰CompressedFileInfo: f,
			gr:                        gr,
		}, nil
	case *vfsgen۰DirInfo:
		return &vfsgen۰Dir{
			vfsgen۰DirInfo: f,
		}, nil
	default:
		// This should never happen because we generate only the above types.
		panic(fmt.Sprintf("unexpected type %T", f))
	}
}

// vfsgen۰CompressedFileInfo is a static definition of a gzip compressed file.
type vfsgen۰CompressedFileInfo struct {
	name              string
	modTime           time.Time
	compressedContent []byte
	uncompressedSize  int64
}

func (f *vfsgen۰CompressedFileInfo) Readdir(count int) ([]os.FileInfo, error) {
	return nil, fmt.Errorf("cannot Readdir from file %s", f.name)
}
func (f *vfsgen۰CompressedFileInfo) Stat() (os.FileInfo, error) { return f, nil }

func (f *vfsgen۰CompressedFileInfo) GzipBytes() []byte {
	return f.compressedContent
}

func (f *vfsgen۰CompressedFileInfo) Name() string       { return f.name }
func (f *vfsgen۰CompressedFileInfo) Size() int64        { return f.uncompressedSize }
func (f *vfsgen۰CompressedFileInfo) Mode() os.FileMode  { return 0444 }
func (f *vfsgen۰CompressedFileInfo) ModTime() time.Time { return f.modTime }
func (f *vfsgen۰CompressedFileInfo) IsDir() bool        { return false }
func (f *vfsgen۰CompressedFileInfo) Sys() interface{}   { return nil }

// vfsgen۰CompressedFile is an opened compressedFile instance.
type vfsgen۰CompressedFile struct {
	*vfsgen۰CompressedFileInfo
	gr      *gzip.Reader
	grPos   int64 // Actual gr uncompressed position.
	seekPos int64 // Seek uncompressed position.
}

func (f *vfsgen۰CompressedFile) Read(p []byte) (n int, err error) {
	if f.grPos > f.seekPos {
		// Rewind to beginning.
		err = f.gr.Reset(bytes.NewReader(f.compressedContent))
		if err != nil {
			return 0, err
		}
		f.grPos = 0
	}
	if f.grPos < f.seekPos {
		// Fast-forward.
		_, err = io.CopyN(ioutil.Discard, f.gr, f.seekPos-f.grPos)
		if err != nil {
			return 0, err
		}
		f.grPos = f.seekPos
	}
	n, err = f.gr.Read(p)
	f.grPos += int64(n)
	f.seekPos = f.grPos
	return n, err
}
func (f *vfsgen۰CompressedFile) Seek(offset int64, whence int) (int64, error) {
	switch whence {
	case io.SeekStart:
		f.seekPos = 0 + offset
	case io.SeekCurrent:
		f.seekPos += offset
	case io.SeekEnd:
		f.seekPos = f.uncompressedSize + offset
	default:
		panic(fmt.Errorf("invalid whence value: %v", whence))
	}
	return f.seekPos, nil
}
func (f *vfsgen۰CompressedFile) Close() error {
	return f.gr.Close()
}

// vfsgen۰DirInfo is a static definition of a directory.
type vfsgen۰DirInfo struct {
	name    string
	modTime time.Time
	entries []os.FileInfo
}

func (d *vfsgen۰DirInfo) Read([]byte) (int, error) {
	return 0, fmt.Errorf("cannot Read from directory %s", d.name)
}
func (d *vfsgen۰DirInfo) Close() error               { return nil }
func (d *vfsgen۰DirInfo) Stat() (os.FileInfo, error) { return d, nil }

func (d *vfsgen۰DirInfo) Name() string       { return d.name }
func (d *vfsgen۰DirInfo) Size() int64        { return 0 }
func (d *vfsgen۰DirInfo) Mode() os.FileMode  { return 0755 | os.ModeDir }
func (d *vfsgen۰DirInfo) ModTime() time.Time { return d.modTime }
func (d *vfsgen۰DirInfo) IsDir() bool        { return true }
func (d *vfsgen۰DirInfo) Sys() interface{}   { return nil }

// vfsgen۰Dir is an opened dir instance.
type vfsgen۰Dir struct {
	*vfsgen۰DirInfo
	pos int // Position within entries for Seek and Readdir.
}

func (d *vfsgen۰Dir) Seek(offset int64, whence int) (int64, error) {
	if offset == 0 && whence == io.SeekStart {
		d.pos = 0
		return 0, nil
	}
	return 0, fmt.Errorf("unsupported Seek in directory %s", d.name)
}

func (d *vfsgen۰Dir) Readdir(count int) ([]os.FileInfo, error) {
	if d.pos >= len(d.entries) && count > 0 {
		return nil, io.EOF
	}
	if count <= 0 || count > len(d.entries)-d.pos {
		count = len(d.entries) - d.pos
	}
	e := d.entries[d.pos : d.pos+count]
	d.pos += count
	return e, nil
}
